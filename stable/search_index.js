var documenterSearchIndex = {"docs":
[{"location":"examples/example1/#an-example","page":"Example 1","title":"an example","text":"","category":"section"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"#CFMG.jl","page":"Home","title":"CFMG.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CFMG.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: CI)","category":"page"},{"location":"#Cell-Free-Model-Generator-in-Julia-(CFMG)","page":"Home","title":"Cell Free Model Generator in Julia (CFMG)","text":"","category":"section"},{"location":"#Installation-and-Requirements","page":"Home","title":"Installation and Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CFMGjl is organized as a Julia package which can be installed in the package mode of Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Start of the Julia REPL and enter the package mode using the  key (to get back press the backspace or ^C keys). Then, at the prompt enter:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.1) pkg> add https://github.com/varnerlab/CFMG.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install the CFMGjl package and the other required packages. CFMGjl requires Julia 1.5.x and above.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CFMGjl is open source, available under a MIT software license. You can download this repository as a zip file, clone or pull it by using the command (from the command-line):","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ git pull https://github.com/varnerlab/CFMG.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ git clone https://github.com/varnerlab/CFMG.git","category":"page"},{"location":"#How-do-I-generate-model-code?","page":"Home","title":"How do I generate model code?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To generate cell free model code, first load the JuCFMG package, then generate a default project, add content to the Networkvff model file (and optionally update Defaulttoml with your values), and then generate code using the make_*_model family of commands. To generate a default project structure, use the commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CFMG\njulia> generate_default_project(<path to project dir>)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The generate_default_project command writes a blank  Networkvff model file, and a Defaultstoml file to the user specified path. If a directory already exists at the user specified location, it is backed-up before new code is written. After you have generated a default project structure, add content to the Networkvff model file. Lastly, issue the command make_*_model from the REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CFMG\njulia> make_julia_model(<path to model file>, <path where files will be written>)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition to Julia, you can generate cell free model code for the Octave, Python 3.x and COBRA package in MATLAB environments. In these cases, issue the language specific commands, make_octave_model, make_python_model or make_matlab_model. The MATLAB/COBRA command make_matlab_model generates a COBRA-compatible MATLAB MAT-file while the other commands generate fully editable source code.","category":"page"},{"location":"#Are-there-other-packages-required-to-run-the-model-code?","page":"Home","title":"Are there other packages required to run the model code?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several other packages that are required to run the model. However, these should be installed automagically the first time you run your code. The linear programming problem is solved using the GLPK solver, which is freely available for a variety of platforms.","category":"page"},{"location":"#How-is-the-model-file-structured?","page":"Home","title":"How is the model file structured?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CFMGjl transforms a structured text file into cell free model code. CFMGjl text files consist of delimited record types organized into four sections TXTL-SEQUENCE, METABOLISM, GRN and PARAMETERS.","category":"page"},{"location":"#METABOLISM-records","page":"Home","title":"METABOLISM records","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"METABOLISM records are used to encode metabolic reactions. METABOLISM records consist of five fields.","category":"page"},{"location":"","page":"Home","title":"Home","text":"reaction_name (unique), [{; delimited set of ec numbers | []}],reactant_string,product_string, reversible","category":"page"},{"location":"#TXTL-SEQUENCE-records","page":"Home","title":"TXTL-SEQUENCE records","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TXTL-SEQUENCE records are used to generate sequence specific transcription and translation reactions which are appended to the end of the metabolic reactions encoded in the METABOLISM section. TXTL-SEQUENCE records take the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"{X|L},{gene_symbol|protein_symbol},{RNAP_symbol|Ribosome_symbol}::sequence;","category":"page"},{"location":"","page":"Home","title":"Home","text":"where:","category":"page"},{"location":"","page":"Home","title":"Home","text":"{X|L}: record type identifier takes on values of either X or L. X denotes a transcription record, while L denotes a translation record.\n{genesymbol|proteinsymbol}: species symbol used in the model. The species symbol is a user specified identifier that is used in the model. No spaces or special chars, _ are acceptable, but +,- etc are not acceptable.\n{RNAPsymbol|Ribosomesymbol}: RNA polymerase or Ribosome symbol. User specified symbol for the RNA polymerase (X record) or Ribosome (L record).  No spaces or special chars, _ are acceptable, but +,- etc are not acceptable.\nsequence: nucleotide (X record) or protein (L) sequence in plain format.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TXTL-SEQUENCE records are terminated by a  character.","category":"page"},{"location":"#GRN-records","page":"Home","title":"GRN records","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Record structure documented here.","category":"page"}]
}
